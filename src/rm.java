/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author nitsh
 */import java.awt.Font;
import java.sql.*;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
public class rm extends javax.swing.JFrame {

    /**
     * Creates new form rm
     */
    public rm() {
        initComponents();this.setBounds(0,0,1320,820);t.getTableHeader().setFont(new Font("SansSerif", Font.BOLD, 25));
        this.setLocationRelativeTo(null);
        int i=0;
        t.setRowHeight(30);
        //for(int j=i;j<5;j++)
        int[] cs={200,250,250,180,180};
        for(int j:cs)
        {
        TableColumn c= t.getColumnModel().getColumn(i++);
        c.setMinWidth(j);
        c.setMaxWidth(j);
        c.setPreferredWidth(j);}
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        goback = new javax.swing.JButton();
        set = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        rcid1 = new javax.swing.JRadioButton();
        rname = new javax.swing.JRadioButton();
        jLabel4 = new javax.swing.JLabel();
        rasc = new javax.swing.JRadioButton();
        rdes = new javax.swing.JRadioButton();
        enter = new javax.swing.JButton();
        goback7 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        t = new javax.swing.JTable();
        q5 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        goback.setFont(new java.awt.Font("Tahoma", 0, 32)); // NOI18N
        goback.setText("<- GO BACK");
        goback.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gobackActionPerformed(evt);
            }
        });

        set.setFont(new java.awt.Font("Tahoma", 0, 30)); // NOI18N
        set.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 30)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("SELECT ANY ONE OF THE ATTRIBUTES AND THE ORDER IN WHICH ");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 30)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("MATCH INFORMATION IS TO BE RETRIEVED OR DISPLAYED :");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 30)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("ATTRIBUTE :");

        rcid1.setFont(new java.awt.Font("Tahoma", 0, 21)); // NOI18N
        rcid1.setText("MATCH ID");
        rcid1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rcid1ActionPerformed(evt);
            }
        });

        rname.setFont(new java.awt.Font("Tahoma", 0, 21)); // NOI18N
        rname.setText("MATCH DATE");
        rname.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rnameActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 30)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("ORDER :");

        rasc.setFont(new java.awt.Font("Tahoma", 0, 21)); // NOI18N
        rasc.setText("ASCENDING");
        rasc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rascActionPerformed(evt);
            }
        });

        rdes.setFont(new java.awt.Font("Tahoma", 0, 21)); // NOI18N
        rdes.setText("DESCENDING");
        rdes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdesActionPerformed(evt);
            }
        });

        enter.setFont(new java.awt.Font("Tahoma", 0, 28)); // NOI18N
        enter.setText("ENTER");
        enter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enterActionPerformed(evt);
            }
        });

        goback7.setBackground(new java.awt.Color(189, 189, 247));
        goback7.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        goback7.setForeground(new java.awt.Color(102, 0, 102));
        goback7.setText("HOME");
        goback7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goback7ActionPerformed(evt);
            }
        });

        t.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        t.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "MATCH  ID", "MATCH LOC", "MATCH DATE", "TEAM 1 ID", "TEAM 2 ID"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        t.setColumnSelectionAllowed(true);
        jScrollPane1.setViewportView(t);

        q5.setFont(new java.awt.Font("Tahoma", 0, 28)); // NOI18N
        q5.setText("SELECT AGAIN");
        q5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                q5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(goback)
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(goback7, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 235, Short.MAX_VALUE)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 828, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(237, 237, 237))
            .addGroup(layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addComponent(rcid1)
                .addGap(27, 27, 27)
                .addComponent(rname, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(rasc)
                .addGap(18, 18, 18)
                .addComponent(rdes)
                .addGap(18, 18, 18)
                .addComponent(enter, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(set, javax.swing.GroupLayout.PREFERRED_SIZE, 1238, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(q5, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(520, 520, 520))))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addContainerGap(130, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1040, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(130, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(goback)
                    .addComponent(goback7, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rcid1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rasc, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel3)
                    .addComponent(rname, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rdes, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(enter))
                .addGap(30, 30, 30)
                .addComponent(set, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(458, 458, 458)
                .addComponent(q5, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addContainerGap(298, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 405, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(97, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void gobackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gobackActionPerformed
        // TODO add your handling code here:
        try{
            Connection con= DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:xe","NitishR","dbms");
            con.commit();
        }
        catch(Exception e )
        {
            System.err.println(e);
        }match a =new match();
        a.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_gobackActionPerformed

    private void rcid1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rcid1ActionPerformed
        // TODO add your handling code here:
        int i=0;
    }//GEN-LAST:event_rcid1ActionPerformed

    private void rnameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rnameActionPerformed
        // TODO add your handling code here:
        int i=0;
    }//GEN-LAST:event_rnameActionPerformed

    private void rascActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rascActionPerformed
        // TODO add your handling code here:
        int i=0;
    }//GEN-LAST:event_rascActionPerformed

    private void rdesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdesActionPerformed
        // TODO add your handling code here:
        int i=0;
    }//GEN-LAST:event_rdesActionPerformed

    private void enterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enterActionPerformed
        // TODO add your handling code here:

        if(rcid1.isSelected()==true && rasc.isSelected()==true)
        {
            try{
                Connection con= DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:xe","NitishR","dbms");
                Statement st= con.createStatement();
                ResultSet rs=st.executeQuery("select m.mid,m.mloc,m.mdate,t.tid from match m,play t where m.mid=t.mid order by m.mid desc ");
                if(rs.next()==false){
                set.setText("NO RECORDS FOUND");
                }
                else{
                    do{DefaultTableModel model = (DefaultTableModel) t.getModel();
                    String r1= rs.getString(3);
                    String r=r1.substring(0,10);
                    String a,b,c,d;
                    a=rs.getString(1);
                    b=rs.getString(2);
                    c=rs.getString(4);
                    rs.next();
                    d=rs.getString(4);
                    model.insertRow(1,new Object[]{a,b,r,c,d});
                    }while(rs.next());
                }
            }
            catch(Exception e)
            {
                System.err.println(e);
            }
        }
        else if(rname.isSelected()==true && rasc.isSelected()==true){
            try{
                Connection con= DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:xe","NitishR","dbms");
                Statement st= con.createStatement();
                ResultSet rs=st.executeQuery("select m.mid,m.mloc,m.mdate,t.tid from match m,play t where m.mid=t.mid order by m.mdate desc ");
                if(rs.next()==false){
                set.setText("NO RECORDS FOUND");
                }
                else{
                    do{DefaultTableModel model = (DefaultTableModel) t.getModel();
                    String r1= rs.getString(3);
                    String r=r1.substring(0,10);
                    String a,b,c,d;
                    a=rs.getString(1);
                    b=rs.getString(2);
                    c=rs.getString(4);
                    rs.next();
                    d=rs.getString(4);
                    model.insertRow(1,new Object[]{a,b,r,c,d});
                    }while(rs.next());
                }
            }
            catch(Exception e)
            {
                System.err.println(e);
            }
        }
        else if(rcid1.isSelected()==true && rdes.isSelected()==true){
            try{
                Connection con= DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:xe","NitishR","dbms");
                Statement st= con.createStatement();
               ResultSet rs=st.executeQuery("select m.mid,m.mloc,m.mdate,t.tid from match m,play t where m.mid=t.mid order by m.mid ");
                if(rs.next()==false){
                set.setText("NO RECORDS FOUND");
                }
                else{
                    do{DefaultTableModel model = (DefaultTableModel) t.getModel();
                    String r1= rs.getString(3);
                    String r=r1.substring(0,10);
                    String a,b,c,d;
                    a=rs.getString(1);
                    b=rs.getString(2);
                    c=rs.getString(4);
                    rs.next();
                    d=rs.getString(4);
                    model.insertRow(1,new Object[]{a,b,r,c,d});
                    }while(rs.next());
                }
            }
            catch(Exception e)
            {
                System.err.println(e);
            }
        }
        else if(rname.isSelected()==true && rdes.isSelected()==true){
            try{
                Connection con= DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:xe","NitishR","dbms");
                Statement st= con.createStatement();
                
                ResultSet rs=st.executeQuery("select m.mid,m.mloc,m.mdate,t.tid from match m,play t where m.mid=t.mid order by m.mdate ");
                if(rs.next()==false){
                set.setText("NO RECORDS FOUND");
                }
                else{
                    do{DefaultTableModel model = (DefaultTableModel) t.getModel();
                    String r1= rs.getString(3);
                    String r=r1.substring(0,10);
                    String a,b,c,d;
                    a=rs.getString(1);
                    b=rs.getString(2);
                    c=rs.getString(4);
                    rs.next();
                    d=rs.getString(4);
                    model.insertRow(1,new Object[]{a,b,r,c,d});
                    }while(rs.next());
                }
            
            }
            catch(Exception e)
            {
                System.err.println(e);
            }
        }
    }//GEN-LAST:event_enterActionPerformed

    private void goback7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goback7ActionPerformed
        // TODO add your handling code here:
        try{
            Connection con= DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:xe","NitishR","dbms");
            con.commit();
        }
        catch(Exception e )
        {
            System.err.println(e);
        }
        aftrlogin a =new aftrlogin();
        a.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_goback7ActionPerformed

    private void q5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_q5ActionPerformed
        // TODO add your handling code here:
        rm a =new rm();
        a.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_q5ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(rm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(rm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(rm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(rm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new rm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton enter;
    private javax.swing.JButton goback;
    private javax.swing.JButton goback7;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton q5;
    private javax.swing.JRadioButton rasc;
    private javax.swing.JRadioButton rcid1;
    private javax.swing.JRadioButton rdes;
    private javax.swing.JRadioButton rname;
    private javax.swing.JLabel set;
    private javax.swing.JTable t;
    // End of variables declaration//GEN-END:variables
}
